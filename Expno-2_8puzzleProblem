import heapq

def solve(start):
    goal = (1,2,3,4,5,6,7,8,0)
    moves = {0: [1,3], 1: [0,2,4], 2: [1,5],
             3: [0,4,6], 4: [1,3,5,7], 5: [2,4,8],
             6: [3,7], 7: [4,6,8], 8: [5,7]}

    def h(s): return sum(abs((v-1)%3 - i%3) + abs((v-1)//3 - i//3) for i, v in enumerate(s) if v)

    visited, heap = set(), [(h(start), 0, start, [])]
    while heap:
        f, g, state, path = heapq.heappop(heap)
        if state == goal: return path + [state]
        if state in visited: continue
        visited.add(state)
        z = state.index(0)
        for m in moves[z]:
            new = list(state)
            new[z], new[m] = new[m], new[z]
            heapq.heappush(heap, (g+1+h(tuple(new)), g+1, tuple(new), path + [state]))

# Example run
start = (1,2,3,4,0,6,7,5,8)
path = solve(start)
for s in path:
    print(s[:3], "\n", s[3:6], "\n", s[6:], "\n")
