import heapq
print("192372261-Narasimha")
def astar(grid, start, goal):
    def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1])
    open_list = [(0 + heuristic(start, goal), 0, start, [])]
    visited = set()
    while open_list:
        f, g, current, path = heapq.heappop(open_list)
        if current in visited: continue
        visited.add(current)
        path = path + [current]
        if current == goal: return path
        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
            neighbor = (current[0]+dx, current[1]+dy)
            if (0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0])
                and grid[neighbor[0]][neighbor[1]] == 0 and neighbor not in visited):
                heapq.heappush(open_list, (
                    g + 1 + heuristic(neighbor, goal),
                    g + 1, neighbor, path))
    return None

# Example usage
grid = [[0,1,0,0],[0,1,0,1],[0,0,0,0],[1,1,1,0]]
start, goal = (0,0), (3,3)
print(astar(grid, start, goal))
